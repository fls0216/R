setwd("C:/Users/acorn/Rwork/BasicPorject/StatProject")
setwd("C:/Users/acorn/Rwork/data")
ky <- read.csv('../data/KY.csv', header = T)
View(ky)
library(plyr)
library(foreign)
library(dplyr)
library(ggplot2)
library(readxl)
table(ky$group)
mean <- ky %>% group_by(group) %>% summarise(mean_score = mean(score))
mean
mean.1 <-  mean %>% filter(group == 1)
mean.2 <- mean %>% filter(group == 2)
mean.1
mean.1 <-  mean %>% filter(group == 1) %>% select(mean_score)
mean.2 <- mean %>% filter(group == 2 )%>% select(mean_score)
mean.1
cat(mean.1, mean.2)
mean.1 <- mean(ky$score[ky$group == 1])
mean.2 <- mean(ky$score[ky$group == 2])
cat(mean.1, mean.2)
sd.1 <- sd(ky$score[ky$group == 1])
se.2 <- sd(ky$score[ky$group == 2])
sd.1 <- sd(ky$score[ky$group == 1])
sd.2 <- sd(ky$score[ky$group == 2])
cat(sd.1, sd.2)
dffsize <- (mean.1+mean.2)/(sd.1+sd.2)
dffsize
dffsize <- (mean.1+mean.2)/sqrt((sd.1^2+sd.2^2)/2)
dffsize
dffsize <- abs(mean.1+mean.2)/sqrt((sd.1^2+sd.2^2)/2)
dffsize
dffsize <- abs(mean.1-mean.2)/sqrt((sd.1^2+sd.2^2)/2)
dffsize
install.packages('pwr')
#install.packages('pwr')
library(pwr)
pwr.t.test(d=dffsize)
effsize <- abs(mean.1-mean.2)/sqrt((sd.1^2+sd.2^2)/2)
effsize <- abs(mean.1-mean.2)/sqrt((sd.1^2+sd.2^2)/2)
effsize
pwr.t.test(d=effsize, type = 'two.sample', alternative = 'two.sized', power = .8, sig.level = 0.05)
pwr.t.test(d=effsize, type = 'two.sample', alternative = 'two.sided', power = .8, sig.level = 0.05)
install.packages('moonBook')
library(moonBook)
?acs
mean.man <- acs$age[ace$sex == 1]
head(acs)
str(acs)
mean.man <- acs$age[acs$sex == 'male']
mean.woman <- acs$age[acs$sex == 'female']
cat(mean.man, mean.woman)
mean.man <- acs$age[acs$sex == 'Male']
mean.woman <- acs$age[acs$sex == 'Female']
cat(mean.man, mean.woman)
mean.man <- mean(acs$age[acs$sex == 'Male'])
mean.woman <- mean(acs$age[acs$sex == 'Female'])
cat(mean.man, mean.woman)
moonBook::densityplot(age ~ sex, data=acs)
# 정규분포 테스트
# 귀무가설 :  정규분포가 맞다
# 대립가설 :  정규분포가 아니다.
shapiro.test(acs$age[acs$sex == 'Male'])
shapiro.test(acs$age[acs$sex == 'Female'])
# 등분산 테스트
# 귀무가설 : 등분산이 맞다
# 대립가설 : 등분산이 아니다
var.test(age ~ sex, data = acs)
wilcox.test(age~sex, data=acs)
t.test(age~sex, data=acs, var.test=T)
t.test(age~sex, data=acs, var.test=T, alt = 'two.sided')
t.test(age~sex, data=acs, var.test=T, alt = 'less')
t.test(age~sex, data=acs, var.test=T, alt = 'greater')
t.test(age~sex, data=acs, var.test=T, alt = 'two.sided')
# welch's t-test 사용하기
t.test(age~sex, data=acs, var.test=F, alt = 'two.sided')
mean.a <- mean(a)
mean.a
### 집단이 한개인경우
# 주제 : A회사의 건전지 수명이 1000시간일때 무작위로 뽑은 10개의 건전지 수명에 대해 샘플이 모집단과 다르다고 할 수 있는가?
# 귀무가설 : 모집단의 평균과 같다.
# 대립가설 : 모집단의 평균과 다르다.
a<- c(980, 1008, 968, 1032, 1012, 1002, 996, 1017, 990, 955)
mean.a <- mean(a)
mean.a
shapiro.test(a)
?t.test
t.test(a, mu=1000)
# 어떤 학급의 수학 평균 성적이 55점 이었다. 0교시 수업을 하고 다시 성적을 살펴보았다.
b <- c(58,49,39,99,32,88,62,30,55,65,44,55,57,53,88,42,39)
mean.b <- meanb
mean.b <- mean(b)
# 어떤 학급의 수학 평균 성적이 55점 이었다. 0교시 수업을 하고 다시 성적을 살펴보았다.
b <- c(58,49,39,99,32,88,62,30,55,65,44,55,57,53,88,42,39)
mean.b <- mean(b)
mean.b
shapiro.test(b)
t.test(b, mu =55)
t.test(b, mu =55, alt='greater')
t.test(b, mu =50, alt='greater')
t.test(b, mu =40, alt='greater')
t.test(b, mu =46, alt='greater')
### Paired Sample T-test
str(sleep)
View(sleep)
before<- sleep[sleep$group == 1]
before<- subset(sleep, group == 1, extra)
after <- subset(sleep, group == 2, extra)
before
install.packages('PairedData')
library(PairedData)
sleep2 <- paired(before, after)
sleep2
plot(sleep2)
plot(sleep2, type='profile')
plot(sleep2, type='profile') + theme_bw()
plot(sleep2, type='profile') + theme_bw()
shapiro.test(sleep$extra[sleep$group == 1])
# with 함수 사용시 데이터의 이름을 반복해서 사용하지 않아도 됨됨
with(sleep, shapiro.test(extra[group == 1]))
var.test(after ~ before, data = sleep2)
var.test(after, before, data = sleep)
var.test(after, before, data = sleep2)
with(sleep, var.test(extra[group ==1], extra[group ==2]))
with(sleep, t.test(extra~group, data=sleep, paried=T))
with(sleep, t.test(extra ~ group, data=sleep, paried=T))
with(sleep, t.test(extra ~ group, data=sleep, paired=T))
#----------------------------------------------------------------------------
mydata <- read.csv('../data/independent.csv')
View(mydata)
with(mydata, shapiro.test(birth_rate[dummy == 1]))
with(mydata, var.test(birth_rate[dummy == 1]))
with(mydata, var.test(birth_rate[dummy == 1], birth_rate[dummy == 2]))
with(mydata, var.test(birth_rate[dummy == 1], birth_rate[dummy == 0]))
with(mydata, t.test(birth_rate ~ dummy, data = mydata, paired = T))
with(mydata, t.test(birth_rate ~ dummy, data = mydata))
do <- subset(mydata, group == 1, birth_rate)
si<- subset(mydata, group == 0, birth_rate)
do <- subset(mydata, group == 1, birth_rate)
si<- subset(mydata, dummy == 0, birth_rate)
do <- subset(mydata, dummy == 1, birth_rate)
do<- subset(mydata, dummy == 0, birth_rate)
si<- subset(mydata, dummy == 1, birth_rate)
dido <- paired(do,si)
sido <- paired(do,si)
sido
wilcox.test(age~sex, data=acs)
pwr.t.test(d=effsize, type = 'two.sample', alternative = 'two.sided', power = .8, sig.level = 0.05)
moonBook::densityplot(age ~ sex, data=acs)
moonBook::densityplot(birth_rate ~ dummy, data=mydata)
with(mydata, shapiro.test(birth_rate[dummy == 1]))
with(mydata, var.test(birth_rate[dummy == 1], birth_rate[dummy == 0]))
with(mydata, wilcox.test(birth_rate ~ dummy, data = mydata))
#---------------------------------------------------------------------------------------
str(mycars)
#---------------------------------------------------------------------------------------
str(mtcars)
# am : 0 은 오토, 1은 수동, 연비는 mpg
# 오토나 수동에 따라 연비가 같을까? 다를까?
with(mtcars, shapiro.test(mpg[am == 1]))
with(mtcars, var.test(mpg[am == 1], mpg[am == 0]))
with(mtcars, t.test(mpg ~ am, data = mtcars))
#pairedData-------------------------------------------------------------------------------------------
pd <- read.csv('../data/pairedData.csv')
dp
pd
#쥐의 몸무게가 전과 후의 변화가 있는지 없는지 확인
with(pd, shapiro.test(before))
with(pd, var.test(mpg[am==1], mpg[am==0]))
with(pd, var.test(before, After))
#쥐의 몸무게가 전과 후의 변화가 있는지 없는지 확인
with(pd, shapiro.test(before))
with(pd. t.test(before~After, data=pd))
with(pd, t.test(before~After, data=pd))
with(pd, t.test(before~After, data=pd, paired =T))
with(pd, t.test(before~After, data=pd, paired=T))
with(pd, t.test(before~ID, data=pd, paired=T))
with(pd, t.test(ID, data=pd, paired=T))
with(pd, t.test(before, After, data=pd, paired=T))
install.packages('tidyt')
install.packages('tidyr')
pd2 <- gather(pd, key='GROUP', value='RESULT', -ID)
pd2
library(tidty)
pd2 <- gather(pd, key='GROUP', value='RESULT', -ID)
pd2
library(tidty)
library(tidyr)
pd2
pd2 <- gather(pd, key='GROUP', value='RESULT', -ID)
pd2
moonBook::densityplot(pd2$RESULT~pd2$GROUP, data=pd2)
pd3 <- paird(pd$before, pd$After)
#쥐의 몸무게가 전과 후의 변화가 있는지 없는지 확인
# subset으로 뽑아도 되고(그래프 그리기가 용이함) long형으로 하나로 해도 된다(melt)
with(pd, shapiro.test(before))
with(pd, shapiro.test(After))
with(pd, var.test(before, After))
before <- subset(pd2, GROUP == 'before', RESULT)
after <- subset(pd2, GROUP =='After', RESULT)
pd3 <- paired(before, after)
plot(pd3, type='profile')+theme_bw()
#paired------------------------------------------------------------------------------------------------
pd <- read.csv('../data/paired.csv')
View(pd)
atr(pd)
str(pd)
with(pd, shapiro.test(birth_rate_2015))
with(pd, shapiro.test(birth_rate_2010))
wilcox.test(birth_rate_2015,birth_rate_2010, data=pd)
with(pd, wilcox.test(birth_rate_2015,birth_rate_2010, data=pd))
with(pd, wilcox.test(birth_rate_2015,birth_rate_2010, data=pd, paired=T))
#studendt_math------------------------------------------------------------------------------------
math <- read.csv('../data/datasets_251_561_student-mat.csv')
View(math)
#studendt_math------------------------------------------------------------------------------------
math <- read.csv('../data/datasets_251_561_student-mat.csv', header = T)
View(math)
str(math)
summary(math$G1)
summary(math$G2)
summary(math$G3)
table(math$sex)
# 남여 학생별로 3번의 시험에 대한 평균값조회
math <- math %>% group_by(sex) %>% summarise(mean_G = mean(G1, G2, G3))
library(dplyr)
# 남여 학생별로 3번의 시험에 대한 평균값조회
math <- math %>% group_by(sex) %>% summarise(mean_G = mean(G1, G2, G3))
# 남여 학생별로 3번의 시험에 대한 평균값조회
math <- math %>% select(sex, G1, G2, G3)%>% group_by(sex) %>% summarise(mean_g1=mean(g1),mean_g1=mean(g2),mean_g1=mean(g3))
#studendt_math------------------------------------------------------------------------------------
math <- read.csv('../data/datasets_251_561_student-mat.csv', header = T)
# 남여 학생별로 3번의 시험에 대한 평균값조회
math %>% select(sex, G1, G2, G3)%>% group_by(sex) %>% summarise(mean_g1=mean(g1),mean_g1=mean(g2),mean_g1=mean(g3))
# 남여 학생별로 3번의 시험에 대한 평균값조회
math %>% select(sex, G1, G2, G3)%>% group_by(sex) %>% summarise(mean_g1=mean(G1),mean_g1=mean(G2),mean_g1=mean(G3))
# 남여 학생별로 3번의 시험에 대한 평균값조회
math %>% select(sex, G1, G2, G3)%>% group_by(sex) %>% summarise(mean_g1=mean(G1),mean_g2=mean(G2),mean_g3=mean(G3))
math2 <- gather(math, key='sex', value='RESULT', -sex)
math2
# 남여 학생별로 3번의 시험에 대한 평균값조회
mean <- math %>% select(sex, G1, G2, G3)%>% group_by(sex) %>% summarise(mean_g1=mean(G1),mean_g2=mean(G2),mean_g3=mean(G3))
math2 <- gather(mean, key='sex', value='RESULT', -sex)
math2
shapiro.test(math$G1[math$sex=='M'])
shapiro.test(math$G2[math$sex=='M'])
shapiro.test(math$G3[math$sex=='M'])
shapiro.test(math$G1[math$sex=='F'])
shapiro.test(math$G3[math$sex=='F'])
with(math, wilcox.test(G1~sex, data=math))
with(math, wilcox.test(G2~sex, data=math))
with(math, wilcox.test(G3~sex, data=math))
with(math, wilcox.test(G1~sex, data=math, alt='less'))
with(math, wilcox.test(G2~sex, data=math, alt = 'less'))
with(math, wilcox.test(G3~sex, data=math, alt = 'less'))
# G1과 G3에 대해 변화가 있었는지 확인
mean <- math %>% select(G1, G3)
head(mean)
mean(mean$G1)
mean(mean$G3)
with(mean, shapiro.test(G1))
with(mean, shapiro.test(G2))
with(mean, shapiro.test(G3))
with(mean, wilcox.test(G1, G3, data=mean))
with(mean, wilcox.test(G1, G3, data=mean, paired =T))
mydata <- gather(math, key='GTOUP', value='RESULT', 'G1','G3')
with(mydata, wilcox.test(RESULT ~GROUP, data = mydata, paired=T))
mydata <- gather(math, key='GrOUP', value='RESULT', 'G1','G3')
mydata <- gather(math, key='GROUP', value='RESULT', 'G1','G3')
with(mydata, wilcox.test(RESULT ~GROUP, data = mydata, paired=T))
with(mydata, wilcox.test(RESULT ~GROUP, data = mydata, paired=T, alt = 'greater'))
